plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.15'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "groovy"
}

//ext['groovy.version'] = "2.5.7"

group = 'com.importer'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
	mavenCentral()
}

sourceSets {
	main {
		java {
			srcDir 'src/main/java'
			// Exclude the 'docker' folder
			exclude 'docker/**'
		}
	}
	test {
		java.srcDirs = ['src/test/java']
		groovy.srcDirs = ['src/test/groovy']
		resources.srcDirs = ['src/test/resources']
	}

	integrationTest {
		groovy.srcDirs = ['src/integration-test/groovy']
		resources.srcDirs = ['src/integration-test/resources']
		compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
		println configurations.testRuntimeClasspath
		runtimeClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.hibernate:hibernate-spatial'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.postgresql:postgresql:42.2.23'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	implementation 'org.codehaus.groovy:groovy:3.0.16'

	implementation 'com.google.guava:guava:31.1-jre'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation('commons-io:commons-io:2.13.0')

	implementation('org.apache.tomcat:tomcat-annotations-api:9.0.10')
	implementation 'org.apache.poi:poi:5.2.4'

	testImplementation('org.spockframework:spock-core:2.0-M3-groovy-3.0')
	testImplementation('org.spockframework:spock-spring:2.0-M3-groovy-3.0')
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

	// Add dependencies specific to integration tests
	integrationTestImplementation sourceSets.main.output
	integrationTestImplementation sourceSets.test.output
	integrationTestImplementation 'org.spockframework:spock-core:2.0-M3-groovy-3.0'
	integrationTestImplementation('org.spockframework:spock-spring:2.0-M3-groovy-3.0')
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'

	integrationTestImplementation 'org.testcontainers:testcontainers:1.18.3'
	integrationTestImplementation 'org.testcontainers:postgresql:1.18.3'
	integrationTestImplementation 'org.springframework.security:spring-security-test:4.0.0.RELEASE'

}

test {
	useJUnitPlatform()
}

// Task to run integration tests
task integrationTest(type: Test) {
	description = 'Runs the integration tests.'
	group = 'verification'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	shouldRunAfter test
	useJUnitPlatform()
}

// Ensure integration tests run after unit tests
check.dependsOn integrationTest